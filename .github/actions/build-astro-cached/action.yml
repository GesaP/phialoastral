name: 'Build Astro Site with Cache'
description: 'Build Astro site with caching for generated images and build artifacts'
inputs:
  working-directory:
    description: 'Working directory for the build'
    required: false
    default: './phialo-design'
  PUBLIC_TURNSTILE_SITE_KEY:
    description: 'Turnstile site key for CAPTCHA'
    required: false
  PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN:
    description: 'Cloudflare Analytics token'
    required: false
  cache-version:
    description: 'Cache version to force cache invalidation when needed'
    required: false
    default: 'v1'

runs:
  using: 'composite'
  steps:
    # Cache generated WebP/AVIF images
    - name: Cache generated images
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.working-directory }}/public/images/portfolio/*-*w.webp
          ${{ inputs.working-directory }}/public/images/portfolio/*-*w.avif
          ${{ inputs.working-directory }}/.image-cache.json
        key: ${{ runner.os }}-generated-images-${{ inputs.cache-version }}-${{ hashFiles('**/public/images/portfolio/*.jpg', '**/public/images/portfolio/*.jpeg', '**/public/images/portfolio/*.png') }}
        restore-keys: |
          ${{ runner.os }}-generated-images-${{ inputs.cache-version }}-
    
    # Cache Astro build artifacts
    - name: Cache Astro build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.working-directory }}/.astro
          ${{ inputs.working-directory }}/node_modules/.astro
        key: ${{ runner.os }}-astro-build-${{ inputs.cache-version }}-${{ hashFiles('**/src/**/*.astro', '**/src/**/*.tsx', '**/src/**/*.ts', '**/src/**/*.jsx', '**/src/**/*.js') }}
        restore-keys: |
          ${{ runner.os }}-astro-build-${{ inputs.cache-version }}-
    
    # Log cache status
    - name: Check cache status
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "🔍 Checking cache status..."
        
        # Count existing generated images
        WEBP_COUNT=$(find public/images/portfolio -name "*-*w.webp" 2>/dev/null | wc -l || echo "0")
        AVIF_COUNT=$(find public/images/portfolio -name "*-*w.avif" 2>/dev/null | wc -l || echo "0")
        
        echo "📊 Found in cache:"
        echo "  - WebP images: $WEBP_COUNT"
        echo "  - AVIF images: $AVIF_COUNT"
        
        if [ -f .image-cache.json ]; then
          CACHED_IMAGES=$(cat .image-cache.json | grep -c '"hash"' || echo "0")
          echo "  - Cached image metadata: $CACHED_IMAGES entries"
        else
          echo "  - No image cache metadata found (will be created)"
        fi
        
        if [ -d .astro ]; then
          echo "  - Astro build cache: Found"
        else
          echo "  - Astro build cache: Not found (will be created)"
        fi
    
    # Generate modern image formats (will use cache automatically)
    - name: Generate modern image formats
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "🖼️ Generating modern image formats..."
        node scripts/generate-modern-images.js
    
    # Build Astro site
    - name: Build Astro site with all environment variables
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      env:
        # Pass all PUBLIC_ inputs as environment variables
        PUBLIC_TURNSTILE_SITE_KEY: ${{ inputs.PUBLIC_TURNSTILE_SITE_KEY }}
        PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN: ${{ inputs.PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN }}
      run: |
        # Log which environment variables are set (without showing values)
        echo "Environment variables configured:"
        [ ! -z "$PUBLIC_TURNSTILE_SITE_KEY" ] && echo "✓ PUBLIC_TURNSTILE_SITE_KEY is set" || echo "✗ PUBLIC_TURNSTILE_SITE_KEY is not set"
        [ ! -z "$PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN" ] && echo "✓ PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN is set" || echo "✗ PUBLIC_CLOUDFLARE_ANALYTICS_TOKEN is not set"
        echo ""
        
        # Build the site
        pnpm run build
    
    # Log final statistics
    - name: Build statistics
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        echo "📈 Build complete - final statistics:"
        
        # Count final generated images
        WEBP_FINAL=$(find public/images/portfolio -name "*-*w.webp" 2>/dev/null | wc -l || echo "0")
        AVIF_FINAL=$(find public/images/portfolio -name "*-*w.avif" 2>/dev/null | wc -l || echo "0")
        
        echo "  - WebP images: $WEBP_FINAL"
        echo "  - AVIF images: $AVIF_FINAL"
        
        # Check dist size
        if [ -d dist ]; then
          DIST_SIZE=$(du -sh dist | cut -f1)
          echo "  - Distribution size: $DIST_SIZE"
        fi
        
        # Show cache effectiveness
        if [ -f .image-cache.json ]; then
          echo "  - Image cache: Active ✓"
        fi