---
import BaseLayout from './BaseLayout.astro';
import type { Props as BaseLayoutProps } from './BaseLayout.astro';

export interface Props extends BaseLayoutProps {
  // Additional mobile-specific props if needed
  mobileHeroImage?: string;
  criticalCSS?: string;
}

const {
  title,
  description,
  image,
  mobileHeroImage,
  noindex,
  lang = "de",
  criticalCSS,
  ...rest
} = Astro.props;

// Detect if request is from mobile device (server-side)
const userAgent = Astro.request.headers.get('user-agent') || '';
const isMobileUA = /Mobile|Android|iPhone|iPad|iPod/i.test(userAgent);

// Determine resource loading strategy based on device
const resourceStrategy = isMobileUA ? 'conservative' : 'aggressive';

// Mobile-specific optimizations
const heroImage = isMobileUA && mobileHeroImage ? mobileHeroImage : image;

// Generate resource hints based on device type
const getResourceHints = () => {
  if (isMobileUA) {
    // Conservative mobile hints - only critical resources
    return {
      preconnect: [
        'https://fonts.gstatic.com',
      ],
      dnsPrefetch: [
        'https://cdn.phialo.de',
      ],
      preload: [
        // Only preload the most critical mobile resources
        { href: '/fonts/inter-400-latin.woff2', as: 'font', type: 'font/woff2', crossorigin: 'anonymous' },
        { href: mobileHeroImage || '/images/hero-mobile.webp', as: 'image', type: 'image/webp', media: '(max-width: 768px)' }
      ],
      prefetch: [] // No prefetching on mobile to save data
    };
  } else {
    // Aggressive desktop hints
    return {
      preconnect: [
        'https://fonts.gstatic.com',
        'https://cdn.phialo.de',
      ],
      dnsPrefetch: [
        'https://api.phialo.de',
      ],
      preload: [
        { href: '/fonts/playfair-display-400-latin.woff2', as: 'font', type: 'font/woff2', crossorigin: 'anonymous' },
        { href: '/fonts/inter-400-latin.woff2', as: 'font', type: 'font/woff2', crossorigin: 'anonymous' },
        { href: image || '/images/hero-desktop.webp', as: 'image', type: 'image/webp', fetchpriority: 'high' }
      ],
      prefetch: [
        '/portfolio',
        '/services'
      ]
    };
  }
};

const resourceHints = getResourceHints();
---

<BaseLayout 
  title={title} 
  description={description} 
  image={heroImage} 
  noindex={noindex} 
  lang={lang}
  {...rest}
>
  <Fragment slot="head">
    <!-- Mobile-Specific Meta Tags -->
    {isMobileUA && (
      <>
        <!-- Disable automatic detection of phone numbers -->
        <meta name="format-detection" content="telephone=no" />
        
        <!-- iOS specific -->
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
        
        <!-- Android specific -->
        <meta name="mobile-web-app-capable" content="yes" />
        
        <!-- Disable prefetch on mobile to save data -->
        <meta name="turbo-prefetch" content="false" />
      </>
    )}

    <!-- Adaptive Resource Hints -->
    {resourceHints.preconnect.map(href => (
      <link rel="preconnect" href={href} crossorigin />
    ))}
    
    {resourceHints.dnsPrefetch.map(href => (
      <link rel="dns-prefetch" href={href} />
    ))}
    
    {resourceHints.preload.map(resource => (
      <link 
        rel="preload" 
        href={resource.href} 
        as={resource.as}
        type={resource.type}
        crossorigin={resource.crossorigin}
        media={resource.media}
        fetchpriority={resource.fetchpriority}
      />
    ))}
    
    {!isMobileUA && resourceHints.prefetch.map(href => (
      <link rel="prefetch" href={href} />
    ))}

    <!-- Critical CSS for above-the-fold content -->
    {criticalCSS && (
      <style set:html={criticalCSS} />
    )}

    <!-- Adaptive Loading Script -->
    <script>
      import { adaptiveLoader } from '../../utils/adaptive-loading';
      
      // Set data attributes based on network and device capabilities
      if (typeof window !== 'undefined') {
        const loader = adaptiveLoader;
        const networkSpeed = loader.getNetworkSpeed();
        const deviceCapability = loader.getDeviceCapability();
        const imageQuality = loader.getImageQuality();
        
        // Set attributes on document element for CSS hooks
        document.documentElement.dataset.networkSpeed = networkSpeed;
        document.documentElement.dataset.deviceCapability = deviceCapability;
        document.documentElement.dataset.imageQuality = imageQuality;
        
        // Check for data saver mode
        const connection = (navigator as any).connection || 
                          (navigator as any).mozConnection || 
                          (navigator as any).webkitConnection;
        
        if (connection?.saveData) {
          document.documentElement.dataset.saveData = 'true';
        }
        
        // Listen for connection changes
        if (connection && 'addEventListener' in connection) {
          connection.addEventListener('change', () => {
            const newNetworkSpeed = loader.getNetworkSpeed();
            document.documentElement.dataset.networkSpeed = newNetworkSpeed;
            
            // Dispatch custom event for components to react
            window.dispatchEvent(new CustomEvent('networkchange', {
              detail: { networkSpeed: newNetworkSpeed }
            }));
          });
        }
      }
    </script>

    <!-- Deferred Loading Script for Mobile -->
    {isMobileUA && (
      <script>
        import { deferHeavyOperations } from '../../utils/deferred-loading';
        
        // Defer non-critical operations on mobile
        deferHeavyOperations({
          analytics: async () => {
            // Cloudflare Analytics will be loaded by BaseLayout
            // Additional analytics can be loaded here
          },
          socialSharing: async () => {
            // Load social sharing buttons if needed
            const socialContainer = document.querySelector('.social-sharing');
            if (socialContainer) {
              const { initSocialSharing } = await import('../../utils/social-sharing');
              initSocialSharing();
            }
          },
          animations: async () => {
            // Load animation libraries only if needed
            const animatedElements = document.querySelectorAll('[data-animate]');
            if (animatedElements.length > 0) {
              const { initAnimations } = await import('../../utils/animations');
              initAnimations();
            }
          }
        });
      </script>
    )}

    <!-- Network Information API Polyfill for Safari -->
    <script>
      // Polyfill basic network detection for browsers without Network Information API
      if (!('connection' in navigator) && !('mozConnection' in navigator) && !('webkitConnection' in navigator)) {
        // Create a basic fallback
        (navigator as any).connection = {
          effectiveType: '4g',
          saveData: false,
          addEventListener: () => {},
          removeEventListener: () => {}
        };
        
        // Try to detect slow connections through resource timing
        if ('performance' in window && 'getEntriesByType' in performance) {
          const resources = performance.getEntriesByType('resource');
          if (resources.length > 0) {
            const avgDuration = resources.reduce((sum, r) => sum + r.duration, 0) / resources.length;
            // If average resource load time is > 500ms, assume slower connection
            if (avgDuration > 500) {
              (navigator as any).connection.effectiveType = '3g';
            }
          }
        }
      }
    </script>
  </Fragment>

  <!-- Pass content through to BaseLayout -->
  <slot />
</BaseLayout>

<style>
  /* Inline critical CSS for mobile performance */
  @media (max-width: 768px) {
    /* Hide decorative elements on initial load */
    [data-network-speed="slow"] .decorative,
    [data-network-speed="slow"] .parallax,
    [data-save-data="true"] .decorative,
    [data-save-data="true"] .parallax {
      display: none !important;
    }
    
    /* Simplify effects on low-end devices */
    [data-device-capability="low"] * {
      animation-duration: 0.2s !important;
      transition-duration: 0.2s !important;
    }
  }
</style>